// Copyright (c) 2013 Marc Schwieterman
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.


@import 'lib/common.js'

coscript.shouldKeepAround = true

// configuration

var PREVIEW_APPLICATION = "Skala Preview"
var PREVIEW_TARGET_NAME = "Preview"

var PREVIEW_DIRECTORY_NAME = "com.marcisme.sketch-preview"
var config = new Config()
var logger = new Logger(config.isDebug())
var sketch = require('sketch/dom')

// preview functions

function preview(doc) {
  if (!isSupportedVersion(doc)) {
    [doc showMessage:"Sketch 2 is no longer supported"]
    return
  }
  var previewTarget = findPreviewTarget(doc)
  if (previewTarget) {
    writeAndOpenPreviewFile(previewTarget, doc)
  }
  else {
    if (config.isAutoPreview()) { return }
    [doc showMessage:"The Preview plugin requires a selected Artboard"]
  }
}

function findPreviewTarget(doc) {
  return findNamedPreviewTarget(doc) || findSelectedPreviewTarget(doc)
}

function findSelectedPreviewTarget(doc) {
  logger.debug("Searching for selected Artboard")
  var currentArtboard = [[doc currentPage] currentArtboard]
  if (currentArtboard) {
    logger.debug("Found selected Artboard: " + [currentArtboard name])
  }
  else {
    logger.debug("No Artboard selected")
  }
  return currentArtboard
}

function findNamedPreviewTarget(doc) {
  logger.debug("Searching for named preview slice: " + PREVIEW_TARGET_NAME)
  var targets = allTargets(doc)
  for (var i = 0; i < [targets count]; i++) {
    var target = targets[i]
    if (isPreviewTarget([target name])) {
      logger.debug("Found named preview slice")
      return target
    }
  }
  logger.debug("No named preview slice found")
}

function allTargets(doc) {
  if (isSupportedVersion(doc)) {
    // Sketch 3
    return [[doc currentPage] exportableLayers]
  } else {
    logger.error("Unable to search for target slice; Sketch implementation may have changed")
    // Return empty array, so we move on to the next strategy
    return [NSArray new]
  }
}

function isPreviewTarget(name) {
  return [name localizedCaseInsensitiveCompare:PREVIEW_TARGET_NAME] == NSOrderedSame
}

function writeAndOpenPreviewFile(previewTarget, doc) {
  var scale = getPreviewScale(previewTarget)
  var options = getExportOptions(getPreviewDirectory(), scale)

  logger.debug("exporting artboard \"" + previewTarget.name() + "\" to directory: " + getPreviewDirectory())
  sketch.export(previewTarget, options)

  var files = getImageFiles(previewTarget)

  var previewFileName = files.shift()
  var previewFile = getPreviewFilePath(previewFileName)
  logger.debug("opening " + previewFile)
  openPreviewFile(previewFile, doc)

  var latestFile = getPreviewDirectory() + "/latest"
  var nsPreviewFileName = [NSString stringWithFormat:"%@", previewFileName]

  [[NSFileManager defaultManager] createFileAtPath:latestFile contents:nsPreviewFileName attributes:nil]

  for (var i = 0; i < files.length; i++) {
    var file = files[i]
    var oldFile = getPreviewFilePath(file)
    logger.debug("deleting " + oldFile)
    [[NSFileManager defaultManager] removeItemAtPath:oldFile error:null]
  }
}

function getArtboardId(artboard) {
  var artboardId = sketch.fromNative(artboard)["id"]
  logger.debug("artboardId: " + artboardId)
  return artboardId
}

function getPreviewScale(layer) {
  var rect = [[layer absoluteRect] rect]
  var size = config.getScalingStrategy().sizeForRect(rect)
  logger.debug("preview scale factor: " + size)
  return size
}

function getExportOptions(output, scale) {
  return {
    "output": output,
    "save-for-web": false,
    "formats": "png",
    "use-id-for-name": true,
    "scales": scale
  }
}

// the first file in the returned array is the current preview file
function getImageFiles(artboard) {
  var artboardId = getArtboardId(artboard)
  var files = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:getPreviewDirectory() error:nil]
  var sortedFiles = []
  for (var i = 0; i < files.length; i++) {
    var file = files[i]
    if (!file.endsWith('.png')) { continue }
    if (file.startsWith(artboardId)) {
      logger.debug("found current preview file: " + file)
      sortedFiles.unshift(file)
    } else {
      logger.debug("found old preview file: " + file)
      sortedFiles.push(file)
    }
  }
  return sortedFiles
}

function getPreviewFilePath(fileName) {
  return getPreviewDirectory() + "/" + fileName
}

function getPreviewDirectory() {
  var fileManager = [NSFileManager defaultManager]
  var cachesURL = [[fileManager URLsForDirectory:NSCachesDirectory inDomains:NSUserDomainMask] lastObject]
  return [[cachesURL URLByAppendingPathComponent:PREVIEW_DIRECTORY_NAME] path]
}

function openPreviewFile(previewFilePath, doc) {
  if(![[NSWorkspace sharedWorkspace] openFile:previewFilePath withApplication:PREVIEW_APPLICATION andDeactivate:false]]) {
    [doc showMessage:"Failed to open preview file; Make sure '" + PREVIEW_APPLICATION + "' is installed."]
  }
}

function onRun(context) {
  config.reload()
  var doc = context.document
  preview(doc)
}

function autoPreview(context) {
  config.reload()
  if (!config.isAutoPreview()) { return }
  // TODO: document is sometimes null
  // var doc = context.actionContext.document
  var doc = [MSDocument currentDocument]
  preview(doc)
}

